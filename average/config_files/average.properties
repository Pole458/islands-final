# The name of the simulation. At the end of the simulation, the results
# of each run be saved in a file called
# {@code [simulationName]_RUN[runId].txt}.
#
# Required.
# Type: text
simulationName=Average
#
#
# The name of the group of islands being evolved. It appears in the GUI and
# in the logs.
#
# Required.
# Type: text
islandGroupName=Island
#
#
# How many runs of this simulation to execute.
#
# (default: 1)
# Type: 32 bit signed integer, only positives
numberOfRuns=1
#
#
# At the end of each iteration, the population of an island is evaluated
# against a validation set. If there are no improvements for
# {@code noImprovementsLimit} generations, the island "pauses" and ignores
# the requests to train from the controller. To deactivate this, simply
# use a limit greater than {@code maxGenerations}.
#
# (default: 5)
# Type: 32 bit signed integer, only positives
noImprovementsLimit=5
#
#
# When some individuals or some data immigrate on an island, its counter
# of "generations with no improvements on the validation set" is decreased
# of this amount.
#
# (default: 5)
# Type: 32 bit signed integer, only non-negatives
noImprovementsDecrement=5
#
#
# When all islands completed the iteration, the best *overall*
# islandIndividual evaluated against the validation set is compared to the previous
# best individuals. If there are no improvements for
# {@code noImprovementsGlobalLimit} generations, the simulation terminates.
# To deactivate this, simply use a limit greater than {@code maxGenerations}.
#
# (default: 5)
# Type: 32 bit signed integer, only positives
noImprovementsGlobalLimit=5
#
#
# A migration is performed each {@code migrationRate} generations.
# If 0, no migrations are executed.
#
# (default: 0)
# Type: 32 bit signed integer, only non-negatives
migrationRate=10
#
#
# How many individuals are sent from an island to another at each
# migration. Considered only if {@code migrationRate} > 0.
#
# (default: 10)
# Type: 32 bit signed integer, only non-negatives
individualsMigration=10
#
#
# How many istances of data are sent from an island to another at each
# migration (significant only if {@code migrationMode} is
# {@code WITH_DATA_SUBSET} and {@code migrationRate} > 0).
#
# (default: 10)
# Type: 32 bit signed integer, only non-negatives
instancesMigration=10
#
#
# Each time that a migration should occur, each islands sends the
# migrants(+data) to another island following a ring pattern.
# If {@code true}, each time the ring is permutated before the migrations
# are performed. Considered only if {@code migrationRate} > 0.
#
# (default: false)
# Type: boolean, either true or false
permutateRing=false
#
#
# How to split the training environment between the islands at the
# beginning of the simulation.
#
# (default: NONE)
startingSplit=RANDOM
#
# How to split the training environment between the islands at eachmigration.
#
# (default: RANDOM)
environmentSplit=RANDOM
#
#
# The number of islands.
#
# (default: 8)
# Type: 32 bit signed integer, only positives
numIslands=4
# Stops the simulation when and individual reaches (>=) the target fitness
#
# (default: 1.0)
# Type: 64 bit floating point precision
targetFitness = -0.000001
#
#
# The size of starting population of each island.
#
# (default: 500)
# Type: 32 bit signed integer, only positives
islandStartingPopulation=100
#
#
# The number of maximum generations to evolve in each run.
#
# (default: 400)
# Type: 32 bit signed integer, only positives
maxGenerations=4000
#
#
# The number of minimum iterations in each run, for a group of islands.
# {@code noImprovementsGlobalLimit} is ignored until this number of iterations
# is reached.
#
# (default: 0)
# Type: 32 bit signed integer, only non-negatives
minGlobalIterations=200
#
# Type of migration system
#
# (default: RING)
migrationSystem=SPREAD
#
# Permutate islands in case of Ring migrations
#
# (defualt: false)
permutate=true
#
# Graph Structure used by Graph Migration Sytem
graphStructure=1->0,0->1,0->2,2->0,0->3,3->0